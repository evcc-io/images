name: Build images

on:
  workflow_dispatch:
    inputs:
      board:
        description: "Target board to build (or all)"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - rpi4b
          - radxa-e52c
          - nanopi-r3s
      evcc_channel:
        description: "evcc APT channel (stable or nightly)"
        required: true
        default: "stable"
        type: choice
        options:
          - stable
          - nightly
  workflow_call:
    inputs:
      board:
        description: "Target board to build (or all)"
        required: true
        default: "all"
        type: string
      evcc_channel:
        description: "evcc APT channel (stable or nightly)"
        required: true
        default: "stable"
        type: string

jobs:
  prepare:
    runs-on: depot-ubuntu-24.04-arm-4
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Compute matrix
        id: set-matrix
        run: |
          choice='${{ inputs.board }}'
          case "$choice" in
            all)      MATRIX='["rpi4b","radxa-e52c","nanopi-r3s"]' ;;
            rpi4b)    MATRIX='["rpi4b"]' ;;
            radxa-e52c) MATRIX='["radxa-e52c"]' ;;
            nanopi-r3s) MATRIX='["nanopi-r3s"]' ;;
            *) echo "Unknown board: $choice" >&2; exit 1 ;;
          esac
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: depot-ubuntu-24.04-arm-4
    timeout-minutes: 360
    strategy:
      fail-fast: false
      matrix:
        board: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    name: Build ${{ matrix.board }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare Docker and workspace
        run: |
          mkdir -p dist logs
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support xz-utils zip

      - name: Read evcc version
        id: evcc-version
        run: |
          EVCC_VERSION=$(tr -d '\n\r' < EVCC_VERSION)
          echo "version=$EVCC_VERSION" >> $GITHUB_OUTPUT
          echo "EVCC_VERSION=$EVCC_VERSION" >> $GITHUB_ENV

      - name: Build image
        env:
          EVCC_CHANNEL: ${{ inputs.evcc_channel }}
        run: |
          set -euo pipefail
          chmod +x ./scripts/build-armbian.sh
          echo "::group::Building for ${{ matrix.board }}"
          bash ./scripts/build-armbian.sh \
            --board "${{ matrix.board }}" \
            --evcc-channel "$EVCC_CHANNEL"
          echo "::endgroup::"

      - name: Compress .img file
        run: |
          # Find and compress the .img file to save storage space
          IMG_FILE=$(find dist -name "*.img" -type f)
          if [ -n "$IMG_FILE" ]; then
            echo "Compressing $IMG_FILE with zip"
            # Create zip with maximum compression, preserving the original filename
            IMG_DIR=$(dirname "$IMG_FILE")
            IMG_NAME=$(basename "$IMG_FILE")
            cd "$IMG_DIR"
            zip -9 "${IMG_NAME}.zip" "$IMG_NAME"
            rm "$IMG_NAME"  # Remove original to save space
            echo "Compressed to ${IMG_FILE}.zip"
          else
            echo "No .img file found to compress"
            exit 1
          fi

      - name: Upload compressed .img.zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: armbian_evcc-${{ steps.evcc-version.outputs.version }}_${{ matrix.board }}.img.zip
          path: dist/**/${{ matrix.board }}/*.img.zip
          if-no-files-found: error

      - name: Upload .img.sha artifact
        uses: actions/upload-artifact@v4
        with:
          name: armbian_evcc-${{ steps.evcc-version.outputs.version }}_${{ matrix.board }}.img.sha
          path: dist/**/${{ matrix.board }}/*.img.sha
          if-no-files-found: error

      - name: Upload .img.txt artifact
        uses: actions/upload-artifact@v4
        with:
          name: armbian_evcc-${{ steps.evcc-version.outputs.version }}_${{ matrix.board }}.img.txt
          path: dist/**/${{ matrix.board }}/*.img.txt
          if-no-files-found: error
